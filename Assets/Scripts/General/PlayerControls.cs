//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/General/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Underwater"",
            ""id"": ""45f6156c-c0b0-4667-9fa5-ceb38f0c758a"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""f4ba96c5-2c27-4eb6-b790-8f8180035ed2"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Light"",
                    ""type"": ""Button"",
                    ""id"": ""bc0301ce-c179-4ed9-b7f4-6c422e814dfd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Propulsion"",
                    ""type"": ""Button"",
                    ""id"": ""9de1ebf3-1dc9-4872-b9fa-c6fc5f7d76ff"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ShowCamera"",
                    ""type"": ""Button"",
                    ""id"": ""c9ef94fb-aa5c-4145-bb37-7a3dfa71d89a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""387799e6-48e0-4bca-b1c7-230d3566af31"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""57a72a8e-aae4-44e5-adce-3aa0c6f68458"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""c8e53672-a805-45c5-9656-767b757e1de5"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""b03fca1f-6395-4bef-a821-c1f9b66aac38"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""feab23fd-4c7b-4fd2-893a-397b9d9a191d"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""b744594d-6fe1-4560-a221-6e726e1f7882"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""1d2853dc-7c4d-45f4-b33f-134610ce89cf"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Light"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d7f51c6a-1324-419e-b02c-e93494493d29"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Light"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6750c1ba-557b-4ab3-a969-f734fffb2365"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Propulsion"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""abf957d2-12bd-4a32-9f89-7c1f8bf5d433"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Propulsion"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c578fb75-daf1-43f8-9d8d-eda2b1b3ef48"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ShowCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""533536e1-9fcc-4c88-9861-13e9042dcd14"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ShowCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Camera"",
            ""id"": ""7bdc7b93-8636-498e-8665-412c72be344c"",
            ""actions"": [
                {
                    ""name"": ""Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""ea4a011a-b30c-43c9-aa43-25448f740549"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""2765c898-3370-4323-8812-4ea6a317eda2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ExitCamera"",
                    ""type"": ""Button"",
                    ""id"": ""ec838b77-12ec-4b12-bab4-388f76d52ac7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6e105b5b-797c-40ee-9b3c-474a217b6679"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""272d30e4-739b-463b-812b-95403f235fbc"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""c5ebcdee-5b4d-4d5e-88d0-610a59fb64e1"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""b2ae74ea-7cae-4c5d-9299-7ef3dafde68d"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""206fa418-489a-40f1-b61b-55f72614894b"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""1a16354b-5ed5-4bc6-af5f-3d8ea02e7ae0"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""367c0354-58c0-4b9d-aa59-60f7eda84cbe"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9c484563-e730-4403-856c-abe8f66060de"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e1275f96-e0e7-4f02-9d5f-17a6cb480245"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ExitCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2fd07acb-9c0d-419a-b276-c532e949c81a"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ExitCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Underwater
        m_Underwater = asset.FindActionMap("Underwater", throwIfNotFound: true);
        m_Underwater_Move = m_Underwater.FindAction("Move", throwIfNotFound: true);
        m_Underwater_Light = m_Underwater.FindAction("Light", throwIfNotFound: true);
        m_Underwater_Propulsion = m_Underwater.FindAction("Propulsion", throwIfNotFound: true);
        m_Underwater_ShowCamera = m_Underwater.FindAction("ShowCamera", throwIfNotFound: true);
        // Camera
        m_Camera = asset.FindActionMap("Camera", throwIfNotFound: true);
        m_Camera_Rotation = m_Camera.FindAction("Rotation", throwIfNotFound: true);
        m_Camera_Shoot = m_Camera.FindAction("Shoot", throwIfNotFound: true);
        m_Camera_ExitCamera = m_Camera.FindAction("ExitCamera", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Underwater
    private readonly InputActionMap m_Underwater;
    private IUnderwaterActions m_UnderwaterActionsCallbackInterface;
    private readonly InputAction m_Underwater_Move;
    private readonly InputAction m_Underwater_Light;
    private readonly InputAction m_Underwater_Propulsion;
    private readonly InputAction m_Underwater_ShowCamera;
    public struct UnderwaterActions
    {
        private @PlayerControls m_Wrapper;
        public UnderwaterActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Underwater_Move;
        public InputAction @Light => m_Wrapper.m_Underwater_Light;
        public InputAction @Propulsion => m_Wrapper.m_Underwater_Propulsion;
        public InputAction @ShowCamera => m_Wrapper.m_Underwater_ShowCamera;
        public InputActionMap Get() { return m_Wrapper.m_Underwater; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UnderwaterActions set) { return set.Get(); }
        public void SetCallbacks(IUnderwaterActions instance)
        {
            if (m_Wrapper.m_UnderwaterActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_UnderwaterActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_UnderwaterActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_UnderwaterActionsCallbackInterface.OnMove;
                @Light.started -= m_Wrapper.m_UnderwaterActionsCallbackInterface.OnLight;
                @Light.performed -= m_Wrapper.m_UnderwaterActionsCallbackInterface.OnLight;
                @Light.canceled -= m_Wrapper.m_UnderwaterActionsCallbackInterface.OnLight;
                @Propulsion.started -= m_Wrapper.m_UnderwaterActionsCallbackInterface.OnPropulsion;
                @Propulsion.performed -= m_Wrapper.m_UnderwaterActionsCallbackInterface.OnPropulsion;
                @Propulsion.canceled -= m_Wrapper.m_UnderwaterActionsCallbackInterface.OnPropulsion;
                @ShowCamera.started -= m_Wrapper.m_UnderwaterActionsCallbackInterface.OnShowCamera;
                @ShowCamera.performed -= m_Wrapper.m_UnderwaterActionsCallbackInterface.OnShowCamera;
                @ShowCamera.canceled -= m_Wrapper.m_UnderwaterActionsCallbackInterface.OnShowCamera;
            }
            m_Wrapper.m_UnderwaterActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Light.started += instance.OnLight;
                @Light.performed += instance.OnLight;
                @Light.canceled += instance.OnLight;
                @Propulsion.started += instance.OnPropulsion;
                @Propulsion.performed += instance.OnPropulsion;
                @Propulsion.canceled += instance.OnPropulsion;
                @ShowCamera.started += instance.OnShowCamera;
                @ShowCamera.performed += instance.OnShowCamera;
                @ShowCamera.canceled += instance.OnShowCamera;
            }
        }
    }
    public UnderwaterActions @Underwater => new UnderwaterActions(this);

    // Camera
    private readonly InputActionMap m_Camera;
    private ICameraActions m_CameraActionsCallbackInterface;
    private readonly InputAction m_Camera_Rotation;
    private readonly InputAction m_Camera_Shoot;
    private readonly InputAction m_Camera_ExitCamera;
    public struct CameraActions
    {
        private @PlayerControls m_Wrapper;
        public CameraActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Rotation => m_Wrapper.m_Camera_Rotation;
        public InputAction @Shoot => m_Wrapper.m_Camera_Shoot;
        public InputAction @ExitCamera => m_Wrapper.m_Camera_ExitCamera;
        public InputActionMap Get() { return m_Wrapper.m_Camera; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraActions set) { return set.Get(); }
        public void SetCallbacks(ICameraActions instance)
        {
            if (m_Wrapper.m_CameraActionsCallbackInterface != null)
            {
                @Rotation.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnRotation;
                @Rotation.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnRotation;
                @Rotation.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnRotation;
                @Shoot.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnShoot;
                @Shoot.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnShoot;
                @Shoot.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnShoot;
                @ExitCamera.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnExitCamera;
                @ExitCamera.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnExitCamera;
                @ExitCamera.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnExitCamera;
            }
            m_Wrapper.m_CameraActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Rotation.started += instance.OnRotation;
                @Rotation.performed += instance.OnRotation;
                @Rotation.canceled += instance.OnRotation;
                @Shoot.started += instance.OnShoot;
                @Shoot.performed += instance.OnShoot;
                @Shoot.canceled += instance.OnShoot;
                @ExitCamera.started += instance.OnExitCamera;
                @ExitCamera.performed += instance.OnExitCamera;
                @ExitCamera.canceled += instance.OnExitCamera;
            }
        }
    }
    public CameraActions @Camera => new CameraActions(this);
    public interface IUnderwaterActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnLight(InputAction.CallbackContext context);
        void OnPropulsion(InputAction.CallbackContext context);
        void OnShowCamera(InputAction.CallbackContext context);
    }
    public interface ICameraActions
    {
        void OnRotation(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
        void OnExitCamera(InputAction.CallbackContext context);
    }
}
